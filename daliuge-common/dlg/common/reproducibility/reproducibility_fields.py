#
#    ICRAR - International Centre for Radio Astronomy Research
#    (c) UWA - The University of Western Australia, 2017
#    Copyright by UWA (in the framework of the ICRAR)
#    All rights reserved
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
#    MA 02111-1307  USA
#
"""
This module defines the fields each drop takes for each reproducibility standard defined.
Consider this module partially documentation, partially code.
Data generated by instanced drops at runtime are defined with that drop's implementation.
"""

from enum import Enum

from dlg.common import Categories
from dlg.common.reproducibility.constants import ReproducibilityFlags


class FieldOps(Enum):
    """
    Defines the operations possible on drop data for provenance collection.
    """
    STORE = 0
    COUNT = 1


def extract_fields(drop: dict, fields: dict):
    """
    Attempts to extract fields with the names in fields from the drop description.
    If not found, the key will not be present in the returned dictionary.
    """
    data = {}
    for key, op in fields.items():
        if drop.get(key) is not None:
            if op == FieldOps.STORE:
                data[key] = drop.get(key)
            elif op == FieldOps.COUNT:
                data[key] = len(drop.get(key))
    return data


def lgt_block_fields(rmode: ReproducibilityFlags):
    if rmode == ReproducibilityFlags.NOTHING:
        return {}
    data = {'categoryType': FieldOps.STORE, 'category': FieldOps.STORE,
            'inputPorts': FieldOps.COUNT, 'outputPorts': FieldOps.COUNT,
            'streaming': FieldOps.STORE}
    if rmode == ReproducibilityFlags.REPRODUCE:
        del data['inputPorts']
        del data['outputPorts']
        del data['streaming']
    return data


def lg_block_fields(drop: Categories, rmode: ReproducibilityFlags):
    if drop == Categories.START:
        return {}
    elif drop == Categories.END:
        return {}
    elif drop == Categories.MEMORY:
        return {}
    elif drop == Categories.SHMEM:
        return {}
    elif drop == Categories.FILE:
        return {}
    elif drop == Categories.NGAS:
        return {}
    elif drop == Categories.S3:
        return {}
    elif drop == Categories.PLASMA:
        return {}
    elif drop == Categories.PLASMAFLIGHT:
        return {}
    elif drop == Categories.PARSET:
        return {}
    elif drop == Categories.ENVIRONMENTVARS:
        return {}
    elif drop == Categories.SCATTER:
        return {}
    elif drop == Categories.GATHER:
        return {}
    elif drop == Categories.LOOP:
        return {}
    elif drop == Categories.DATA:
        return {}
    elif drop == Categories.COMPONENT:
        return {}
    elif drop == Categories.PYTHON_APP:
        return {}
    elif drop == Categories.BASH_SHELL_APP:
        return {}
    elif drop == Categories.MPI:
        return {}
    elif drop == Categories.DYNLIB_APP:
        return {}
    elif drop == Categories.DYNLIB_PROC_APP:
        return {}
    else:
        return {}


def pgt_block_fields(drop, rmode: ReproducibilityFlags):
    if drop == Categories.START:
        return {}
    elif drop == Categories.END:
        return {}
    elif drop == Categories.MEMORY:
        return {}
    elif drop == Categories.SHMEM:
        return {}
    elif drop == Categories.FILE:
        return {}
    elif drop == Categories.NGAS:
        return {}
    elif drop == Categories.S3:
        return {}
    elif drop == Categories.PLASMA:
        return {}
    elif drop == Categories.PLASMAFLIGHT:
        return {}
    elif drop == Categories.PARSET:
        return {}
    elif drop == Categories.ENVIRONMENTVARS:
        return {}
    elif drop == Categories.SCATTER:
        return {}
    elif drop == Categories.GATHER:
        return {}
    elif drop == Categories.LOOP:
        return {}
    elif drop == Categories.DATA:
        return {}
    elif drop == Categories.COMPONENT:
        return {}
    elif drop == Categories.PYTHON_APP:
        return {}
    elif drop == Categories.BASH_SHELL_APP:
        return {}
    elif drop == Categories.MPI:
        return {}
    elif drop == Categories.DYNLIB_APP:
        return {}
    elif drop == Categories.DYNLIB_PROC_APP:
        return {}
    else:
        return {}


def pg_block_fields(data, rmode: ReproducibilityFlags):
    return {}
